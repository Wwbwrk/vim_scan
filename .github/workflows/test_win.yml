name: test windows
on: workflow_dispatch
#  schedule:
#    - cron: '42 0 * * *'  # Run once per day, to avoid Coverity's submission limits

#permissions:
#  contents: read # to fetch code (actions/checkout)

jobs:
  scan:
    runs-on: windows-latest

    env:
      CC: gcc
      DEBIAN_FRONTEND: noninteractive
      TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}

    steps:
      - name: Checkout repository from github
        if: env.TOKEN
        uses: actions/checkout@v4
#        with:
#          ref: v9.1.0000
      - run: |
          echo "after tag ref"

#      - name: Download Coverity
#        if: env.TOKEN
#        run: |
#          wget https://scan.coverity.com/download/cxx/linux64 --post-data "token=$TOKEN&&project=Wwbwrk%2Fvim_scan" -O coverity_tool.tgz
#          mkdir cov-scan
#          tar ax -f coverity_tool.tgz --strip-components=1 -C cov-scan
#
#      - name: Install packages
#        if: env.TOKEN
#        run: |
#          sudo apt-get update && sudo apt-get install -y \
#            autoconf \
#            gettext \
#            libcanberra-dev \
#            libperl-dev \
#            python2-dev \
#            python3-dev \
#            liblua5.4-dev \
#            lua5.4 \
#            ruby-dev \
#            tcl-dev \
#            libgtk2.0-dev \
#            desktop-file-utils \
#            libtool-bin \
#            libsodium-dev
#
#      - name: Set up environment
#        if: env.TOKEN
#        run: |
#          echo "$(pwd)/cov-scan/bin" >> $GITHUB_PATH
#          (
#          echo "NPROC=$(getconf _NPROCESSORS_ONLN)"
#          echo "CONFOPT=--enable-perlinterp --enable-pythoninterp --enable-python3interp --enable-rubyinterp --enable-luainterp --enable-tclinterp"
#          ) >> $GITHUB_ENV
#
#      - name: Configure
#        if: env.TOKEN
#        run: |
#          ./configure --with-features=huge ${CONFOPT} --enable-fail-if-missing
#          # Append various warning flags to CFLAGS.
#          sed -i -f ci/config.mk.sed src/auto/config.mk
#          sed -i -f ci/config.mk.${CC}.sed src/auto/config.mk
#
#      - name: Build/scan vim
#        if: env.TOKEN
#        run: |
#          cov-build --dir cov-int make -j${NPROC}
#          tail cov-int/build-log.txt
#
#      - name: Submit results
#        if: env.TOKEN
#        run: |
#          tar zcf cov-scan.tgz cov-int
#          curl --form token=$TOKEN \
#            --form email=$EMAIL \
#            --form file=@cov-scan.tgz \
#            --form version="$(git rev-parse HEAD)" \
#            --form description="Automatic GHA scan" \
#            'https://scan.coverity.com/builds?project=Wwbwrk%2Fvim_scan'
#        env:
#          EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
#
#echo "$(pwd)/cov-scan/bin"
#          get-childitem -recurse "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" n*
#          $d = get-childitem -recurse nmake*
#          if ($d.length -eq 1) { & "$d.fullname" @("/?") } else { "more than 1" }
      - name: end info
        shell: pwsh
        run: |
          dir env:path
          dir env:

      - name: end info also
        shell: pwsh
        run: |
          echo $PSversiontable
          echo "$(pwd)"
          dir "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          echo "GITHUB_PATH = $env:GITHUB_PATH"
          echo "GITHUB_ENV = $env:GITHUB_ENV"
          echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
          cat ("${{ github.workspace}}" + "\src\version.h")
          echo "This job's status is ${{ job.status }}."
          echo "ls -l ${{ github.workspace }}"

      - name: end script look
        shell: pwsh
        run: |
          cd $env:GITHUB_WORKSPACE
          pwd
          get-childitem
          cat ("${{ github.workspace}}" + "\.github\workflows\msvc.ps1")
          cat ($env:GITHUB_WORKSPACE + "\.github\workflows\msvc.ps1")
          cat .github\workflows\msvc.ps1

      - name: end script
        shell: pwsh
        run: |
          cd $env:GITHUB_WORKSPACE
          .\.github\workflows\msvc.ps1

      - name: out file
        shell: pwsh
        run: |
          echo $env:GITHUB_WORKSPACE
          cd $env:GITHUB_WORKSPACE
          dir env: | out-file scan\out.txt -encoding ASCII
          cat scan\out.txt 
